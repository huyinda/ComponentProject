/**
 * 组件模式和集成模式下属性的切换
 */
if (isModule.toBoolean()) {//如果是组件模式---可以单独运行
    apply plugin: 'com.android.application'
} else {//集成模式，不能单独运行
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersions
    buildToolsVersion rootProject.ext.buildToolsVersions


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersions
        targetSdkVersion rootProject.ext.targetSdkVersions
        versionCode rootProject.ext.versionCodes
        versionName rootProject.ext.versionNames

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        //ARouter添加
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    /**
     * 组件模式和集成模式下清单的切换
     */
    sourceSets {
        main {
            if (isModule.toBoolean()) {//组件模式下
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {//集成模式下
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.ext.arouterCompilerVersion"
    api project(path: ':CommonModule')
}
